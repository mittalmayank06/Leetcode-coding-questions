/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public int getSuccessor(TreeNode root)
    {
      
        TreeNode temp = root.right;
        while(temp.left!=null)
        {
            temp = temp.left;
        }
        return temp.val;
    }
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null)
        {
            return root;
        }
        if(key > root.val)
        {
            root.right = deleteNode(root.right,key);
        }
        else if(key < root.val)
        {
            root.left = deleteNode(root.left,key);
        }
        else {
            
                 if (root.left == null) // for one or no child for root node.
                return root.right;
            else if (root.right == null)
                return root.left;
            else {  // has both its childs.
                root.val = getSuccessor(root);
             
                root.right = deleteNode(root.right,root.val);
                
                return root;
            }
        }
        return root;
        
        
    }
}
