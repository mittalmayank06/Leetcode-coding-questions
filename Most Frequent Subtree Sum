/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>ans;
    unordered_map<int,int>mp;
    int max_freq = 0;
    int fun(TreeNode* root)
    {
        if(root==NULL)return 0;
        if(root->left==NULL && root->right==NULL)
        {
            mp[root->val]++;
            max_freq = max(max_freq,mp[root->val]);
            return root->val;
        }
        int leftval = fun(root->left);
        int rightval = fun(root->right);
        mp[leftval+rightval+root->val]++;
        max_freq = max(max_freq,mp[leftval+rightval+root->val]);
        return leftval+rightval+root->val;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        fun(root);
        for(auto c: mp)
        {
            if(c.second==max_freq)ans.push_back(c.first);
        }
        return ans;
    }
};
